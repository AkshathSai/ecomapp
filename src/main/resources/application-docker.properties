server.port=8080

spring.application.name=ecomapp
spring.threads.virtual.enabled=true

# Docker environment configuration
spring.data.mongodb.uri=mongodb://mongodb:27017/ecomapp
spring.kafka.bootstrap-servers=kafka:29092
spring.kafka.consumer.group-id=ecom-group
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
spring.kafka.consumer.properties.spring.json.trusted.packages=*
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer

# Actuator endpoints for health checks
management.endpoints.web.exposure.include=health,info
management.endpoint.health.show-details=when-authorized

# Logging optimizations for containers
logging.level.root=INFO
logging.level.com.hackathon.ecomapp=INFO
logging.pattern.console=%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n

# Resource optimization
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.format_sql=false
